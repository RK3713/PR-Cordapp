import com.typesafe.config.Config
import com.typesafe.config.ConfigFactory

group 'com.pr'
version '1.0'

buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.0'
        corda_gradle_plugins_version = '4.0.42'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'
        corda_platform_version = '4'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }
    
    apply plugin: 'java'
    sourceCompatibility = 1.8
    apply plugin: 'net.corda.plugins.cordformation'
    apply plugin: 'net.corda.plugins.quasar-utils'
    apply plugin: 'net.corda.plugins.cordapp'

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:-options" << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
        exclude '**/log4j2*.xml'
    }
}

apply plugin: 'java'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    info {
        name "CorDapp Template"
        vendor "Corda Open Source"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version.toInteger()
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    testCompile "junit:junit:$junit_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"


    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

dependencies {
    // CorDapp dependencies.
    cordapp project(":pr-common")
    cordapp project(":pr-contract-state-schema")
    cordapp project(":pr-student-contract-state-schema")
    cordapp project(":pr-consultant")
    cordapp project(":pr-university")
    cordapp project(":pr-wes")
    cordapp "$corda_release_group:corda-finance:3.3-corda"
}


//task wrapper(type: Wrapper) {
//    gradleVersion = '4.4.1' //we want gradle 4.4.1 to run this project
//}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    directory "./build/nodes"

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        extraConfig = ['h2Settings.address' : 'localhost:12347']
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Consultants,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        cordapps = [
                "com.pr.consultant:pr-consultant:$version",
                "com.pr.common:pr-common:$version",
                "com.pr.contract.state.schema:pr-contract-state-schema:$version",
                "com.pr.student.contract.state.schema:pr-student-contract-state-schema:$version"
        ]

        cordapps = ["net.corda:corda-finance:3.3-corda"]

        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = ['h2Settings.address' : 'localhost:12346']
    }
    node {
        name "O=University,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }

        cordapps = [
                "com.pr.university:pr-university:$version",
                "com.pr.common:pr-common:$version",
                "com.pr.student.contract.state.schema:pr-student-contract-state-schema:$version"
        ]

        cordapps = ["net.corda:corda-finance:3.3-corda"]

        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = ['h2Settings.address' : 'localhost:12345']
    }
    node {
        name "O=Wes,L=London,C=GB"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }


        cordapps = [
                "com.pr.wes:pr-wes:$version",
                "com.pr.common:pr-common:$version",
                "com.pr.contract.state.schema:pr-contract-state-schema:$version",
                "com.pr.student.contract.state.schema:pr-student-contract-state-schema:$version"
        ]

        cordapps = ["net.corda:corda-finance:3.3-corda"]

        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = ['h2Settings.address' : 'localhost:12344']
    }
}



task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}



enum OS {
    MAC,
    WIN,
    LINUX
}

OS getOSName() {
    def osName = System.getProperty("os.name", "generic").toLowerCase(Locale.ENGLISH)
    if (osName.contains("mac") || osName.contains("darwin")) {
        return OS.MAC
    } else if (osName.contains("win")) {
        return OS.WIN
    } else return OS.LINUX
}

boolean isTmux() {
    System.getenv("TMUX") == null ? false : true
}
/* This task can made more clean and generic or customized as per requirement, though conveys the idea of reading the node.conf file and it's custom properties
Usage: gradle createServer -Penv=dev || gradle createServer -Penv=prod
*/

task createServer(dependsOn: [':pr-consultant-server:bootJar',':pr-university-server:bootJar',':pr-wes-server:bootJar']) {
    doLast {
        int serverPort = 8081 // initial server port
        println 'Started create server task'
        def hasEnv = project.hasProperty('env')
        if (!hasEnv) {
            println "env: dev, selected. intialServer Port is now set to $serverPort"
        }
        if (hasEnv && !(env.toLowerCase() in ['dev', 'prod'])) {
            println "Invalid env: $env, only dev and prod supported!."
        } else {
            if (hasEnv && env.toLowerCase() == 'prod') {
                serverPort = 5050
                println "env: $env, selected. intialServer Port is now set to $serverPort ."
            }
            OS os = getOSName()
            println "Operating System $os"
            def rootBuildFolder = "./build/nodes/"
            def starterBatFile = new File(rootBuildFolder + "runserver.bat")
            def starterShFile = new File(rootBuildFolder + "runserver.sh")
            if (starterBatFile.exists() || starterShFile.exists()) {
                starterBatFile.delete()
                starterShFile.delete()
            }
            String regx = "[^A-Za-z0-9]"
            def winCMD = "start "
            def linux = "x-terminal-emulator -e "
            def linuxTmux = "tmux new-window -n "
            def macStart = "osascript -e 'tell app \"Terminal\" to do script \""
            def macEnd = "\"'"
            def newLine = System.getProperty("line.separator")
            new File(rootBuildFolder).listFiles().sort { it.name }.each { File dir ->
                if (dir.isDirectory() && !dir.getName().find(regx) && !(dir.getName().toLowerCase() in ["notary", "web-logs", "oracle"])) {
                    Config config = ConfigFactory.parseFile(new File(dir.getPath() + "/node.conf"))
                    def rpcAddress = config.getString("rpcSettings.address")
//                    def rpcUsers = (HashMap) config.getAnyRefList("rpcUsers").get(0)
//                    def password = rpcUsers.get("password")
//                    def user = rpcUsers.get("user")
                    String javaCommand = " java -Dnodename=" + dir.getName() +
                            " -Dconfig.rpc.password=" + "test" +
                            " -Dconfig.rpc.address=" + rpcAddress +
                            " -Dmyprocessname=smcdev"+
                            " -Dconfig.rpc.username=" + "user1" +
                            " -Dserver.port=" + (serverPort++) +
                            " -jar " + getJarName(dir.getName())
                    if (os == OS.WIN) {
                        starterBatFile.append(winCMD + javaCommand + newLine)
                        return
                    }
                    if (os == OS.MAC) {
                        starterShFile.append(macStart + javaCommand + macEnd + newLine)
                        return
                    }
                    if (os == OS.LINUX)
                        if (isTmux()) {
                            starterShFile.append(linuxTmux + dir.getName()+"-server" + " '" + javaCommand + "'" + newLine)
                        } else {
                            starterShFile.append(linux + javaCommand + newLine)
                        }
                }
            }
            println 'Finished create server task'
        }
    }
}

private String getJarName(String name) {
    if(name.toLowerCase().contains('consultant'))
        return project(':pr-consultant-server').jar.outputs.files.getSingleFile()
    else if(name.toLowerCase().contains('university'))
        return project(':pr-university-server').jar.outputs.files.getSingleFile()
    else if(name.toLowerCase().contains('wes'))
        return project(':pr-wes-server').jar.outputs.files.getSingleFile()
    else throw TaskExecutionException("Invalid name found")
}